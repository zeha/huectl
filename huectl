#!/usr/bin/env python3
import json
import requests
import sys
import os
import time
import socket
import copy

prefs = {}
prefs_old = None

class CliFatalError(Exception):
    pass


def preffilename():
    if sys.platform == 'darwin':
        tpl = '~/Library/Preferences/huectl.json'
    else:
        tpl = '%s/huectl/config.json' % (sys.environ.get('XDG_CONFIG_HOME', '~/.config'), )
    return os.path.expanduser(tpl)


def prefs_load():
    global prefs, prefs_old
    try:
        with open(preffilename(), 'r') as fp:
            prefs = json.load(fp)
            prefs_old = copy.deepcopy(prefs)
    except:
        prefs = {}


def prefs_save():
    global prefs, prefs_old
    if prefs_old == prefs:
        return
    with open(preffilename(), 'w') as fp:
        json.dump(prefs, fp)


def discover():
    """Find hue bridge using meethue rendezvous point. As this is quite slow,
    try a cached IP first.""" 
    global prefs
    if 'bridge_cache' in prefs:
        try:
            bridgeip = prefs['bridge_cache']['ip']
            reply = requests.get('http://%s/api/' % (bridgeip), timeout=3).json()
            if len(reply) > 0 and 'error' in reply[0] and reply[0]['error']['type'] == 4:
                # good bridge, use it
                return bridgeip
        except requests.exceptions.ConnectTimeout:
            # fallback to rendezvous point
            pass

    print("Discovering bridge...")
    try:
        bridgeip = requests.get('https://www.meethue.com/api/nupnp').json()[0]['internalipaddress']
        prefs['bridge_cache'] = {'ip': bridgeip}
        return bridgeip
    except Exception as except_inst:
        print("Bridge discovery failed:", except_inst)
        raise CliFatalError()


def link(bridgeip):
    """Request username from bridge. User has to press the LINK button while
    doing this."""
    body = json.dumps({'devicetype': 'huectl#' + socket.gethostname()})
    maxtries = 30
    sys.stdout.write("Press link button on bridge %s now..." % bridgeip)
    sys.stdout.flush()
    for try_ in range(0, maxtries):
        reg = requests.post('http://%s/api' % (bridgeip, ), body).json()
        if 'error' in reg[0] and reg[0]['error']['type'] == 101:
            sys.stdout.write(".")
            sys.stdout.flush()
        else:
            prefs['username'] = reg[0]['success']['username']
            prefs_save()
            print()
            return
        time.sleep(1)
    print("\nExpired. Please try again.")
    raise CliFatalError()


class Api(object):
    def __init__(self, bridgeip, username):
        self.url = 'http://%s/api/%s/' % (bridgeip, username)
        self.s = requests.Session()

    def lights(self):
        return self.s.get(self.url + 'lights').json()

    def info(self, light):
        return self.s.get(self.url + ('lights/%d' % (light, ))).json()

    def set_onoff(self, light, onoff):
        body = json.dumps({'on': bool(onoff)})
        return self.s.put(self.url + ('lights/%d/state' % (light, )), body).json()

    def dim(self, light, pct):
        body = json.dumps({'bri': int(pct * 254 / 100), 'on': True})
        return self.s.put(self.url + ('lights/%d/state' % (light, )), body).json()

    def config(self, changes=None):
        url = self.url + 'config'
        if not changes:
            return self.s.get(url).json()
        else:
            body = json.dumps(changes)
            return self.s.put(url, body).json()


def do_swupdate(api):
    config = api.config()
    print("Current bridge software version:", config['swversion'])
    if not config['portalstate']['signedon']:
        print("Bridge not connected to portal, swupdate not possible.")
        raise CliFatalError()
    api.config({'swupdate': {'checkforupdate': True}})
    config = api.config()
    while config['swupdate']['checkforupdate'] is True:
        time.sleep(1)
        config = api.config()

    if config['swupdate']['updatestate'] == 1:
        print("Software download in progress...")
        while ['swupdate']['updatestate'] == 1:
            time.sleep(1)
            config = api.config()

    if config['swupdate']['updatestate'] == 2:
        print("New software found, starting update...")
        #api.config({'swupdate': {'updatestate': 3}})
        print("Update will affect these components:")
        if config['swupdate']['bridge']:
            print("  - bridge")
        for light in config['swupdate']['lights']:
            print("  - light %s", (light, ))
        for sensor in config['swupdate']['sensors']:
            print("  - sensor %s", (sensor, ))
    elif config['swupdate']['updatestate'] == 0:
        print("No new software found.")
        return
    elif config['swupdate']['updatestate'] == 3:
        print("Update already in progress...")
    else:
        print("Unknown updatestate %s", (config['swupdate']['updatestate'], ))
        raise CliFatalError()

    while True:
        try:
            config = api.config()
            if config['swupdate']['notify']:
                break
            time.sleep(1)
        except requests.exceptions.ConnectTimeout:
            print("Bridge unavailable, waiting...")
            time.sleep(3)

    print(config['swupdate']['url'])
    print(config['swupdate']['text'])
    # clear notify flag
    api.config({'swupdate': {'notify': False}})


def main():
    global prefs
    prefs_load()
    bridgeip = discover()
    if 'username' not in prefs:
        link(bridgeip)

    api = Api(bridgeip, prefs['username'])
    if len(sys.argv) == 1:
        command = 'list'
        args = []
    else:
        command = sys.argv[1]
        args = sys.argv[2:]

    if command == 'list':
        lights = api.lights()
        for lightid, detail in lights.items():
            print("%-5s %-30s %-25s %s" % (lightid, detail['name'], detail['type'], detail['state']))
    elif command == 'dim':
        light = int(args[0])
        pct = int(args[1])
        print(api.dim(light, pct))
    elif command == 'on':
        light = int(args[0])
        print(api.set_onoff(light, True))
    elif command == 'off':
        light = int(args[0])
        print(api.set_onoff(light, False))
    elif command == 'swupdate':
        do_swupdate(api)
    elif command == 'help':
        print("Usage:")
        print("huectl list             - list lights")
        print("huectl dim ID pct       - dim light ID to percent pct%")
        print("huectl on ID            - turn on light ID")
        print("huectl off ID           - turn off light ID")
        print("huectl swupdate         - update hue system software (no prompting)")
    else:
        print("Unknown command given.")
        raise CliFatalError()

    prefs_save()


try:
    main()
except CliFatalError:
    sys.exit(1)
